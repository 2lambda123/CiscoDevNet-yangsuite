Coding with yangsuite-filemanager
=================================

Depending on your use case and requirements, there are several different ways
to work with YANG files using yangsuite-filemanager.

First, you should understand that all of the classes defined in
the :py:mod:`ysfilemanager.filemanager` submodule are subclasses of `pyang`_ 's
:class:`pyang.Repository` class. These classes provide varying degrees of
additional functionality for various use cases, but fundamentally they each
represent a collection of YANG modules that pyang can consume.

Simple use case - un-managed directory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this use case:

- You have a directory full of YANG files in some arbitrary location.
- The directory and its files will not be actively managed by YANG Suite,
  but might instead represent a workspace, a Git repository, or some other
  source of files that you are managing on your own.
- You do *not* need the ability to modify the contents of this directory
  (adding/removing/updating files) through YANG Suite APIs.

For this use case, you can use the simple
:py:class:`~ysfilemanager.filemanager.dir_repository.YSYangDirectoryRepository`
class::

  from ysfilemanager import YSYangDirectoryRepository
  repo = YSYangDirectoryRepository(some_directory_path)

  # As in pyang, repo.modules is a list of (name, revision, handle) tuples
  module_names = [entry[0] for entry in repo.modules]

  first_handle = repo.modules[0][2]
  # first_module_text will be the body of the YANG module in question
  first_module_text = repo.get_module_from_handle(first_handle)

  # Get the names of the modules that make use of the ietf-interfaces module
  users = repo.modules_using("ietf-interfaces")

Refer to the API documentation for additional examples.


Intermediate use case - managed repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this use case:

- You want YANG Suite to store and manage your YANG files.
- You want to work with *all* of a given set of files and are not interested
  in selecting only a subset of the files to work with for improved performance.

For this use case, you can use
:py:class:`~ysfilemanager.filemanager.repository.YSYangRepository`.

Creating and managing a managed repository
------------------------------------------

You can create a new repository, belonging to a particular YANG Suite user,
and then add files from various sources to the repository to be managed
by YANG Suite::

  from ysfilemanager import YSYangRepository
  repo = YSYangRepository.create(owner, reponame)
  repo.add_yang_files(some_directory_path_containing_files, ...)
  repo.write()

YSYangRepository supports all of the APIs of YSYangDirectoryRepository as
shown in the previous section, plus a number of additional APIs - refer to
the API documentation for more examples.

Using an existing managed repository
------------------------------------

Once a repository has been created and added to YANG Suite, you can easily
load it for use::

  from ysfilemanager import YSYangRepository
  repo = YSYangRepository(owner, reponame)

You can also list existing repositories to search for the one you want::

  from ysfilemanager import YSYangRepository
  all_repos = YSYangRepository.all_repos()
  # all_repos = {'user1': [{repodata}, {repodata}], 'user2': [...], ...}
  for user, user_repos in all_repos.items():
      for repodata in user_repos:
          repo = YSYangRepository(user, repodata['name'])
          break

Advanced use case - YANG module sets
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In many cases, a managed repository may contain a large number of related
modules, but you may only need to work with a subset of these modules
at any given time. This is what we have YANG module sets ("yangsets") for.

In this use case:

- You want YANG Suite to store and manage your YANG files.
- You have many related YANG modules, but for efficiency's sake, only want
  to work with various subsets of these modules at any given time

For this use case, you can use the
:py:class:`~ysfilemanager.filemanager.mutableyangset.YSMutableYangSet` and
:py:class:`~ysfilemanager.filemanager.yangset.YSYangSet` classes.

Creating and updating a YANG set using the YSMutableYangSet class
-----------------------------------------------------------------

Given an existing managed repository, you can create an associated YANG set::

  from ysfilemanager import YSMutableYangSet
  ys = YSMutableYangSet(owner, setname, modulenames, repository=repo_slug)
  ys.write()

You can also change the contents of an existing set to replace or add to
the set of modules from the associated repository that are included in the set::

  from ysfilemanager import YSMutableYangSet
  ys = YSMutableYangSet.load(owner, setname)
  ys.modules = ['ietf-yang-types', 'ietf-inet-types']
  ys.modules += ['ietf-interfaces']
  ys.write()

Using an existing YANG set with the YSYangSet class
---------------------------------------------------

You can list existing sets that are available for a given user in order to
find the one you wish to load::

  from ysfilemanager import YSYangSet
  for setdata in YSYangSet.user_yangsets(owner):
      ys = YSYangSet.load(owner, setdata['name'])
      break

Similarly you can get the sets that are associated to a given repository::

  from ysfilemanager import YSYangRepository
  repo = YSYangRepository(owner, reponame)
  available_sets = repo.associated_yangsets()
  ys = available_sets[0]

.. _pyang: https://github.com/mbj4668/pyang/wiki/Documentation
