Documentation tooling
=====================

Mission statement
-----------------

The goal is to have a single source of truth for our documentation content,
rather than separate source-controlled files for readthedocs.org,
online documentation pages accessible within YANG Suite itself, and other
documents such as PDF user guides. A change in the documentation should
be made in a single place and automatically propagate into any and all desired
output formats as needed.

Design
------

The source of truth for documentation will be reStructuredText (``.rst``) files
in the ``<workspace root>/docs/`` directory, which is source-controlled in Git.
Files in this directory are not generally for direct user consumption but serve
as the shared "source code" for any and all documentation output formats.
These files are compiled to the desired format(s) using Sphinx_.

Most YANG Suite apps will have both "user" documentation
(how to use the application as an end user) and "developer" documentation
(API definitions, autodoc code documentation, etc.). We recommend therefore that
for clarity, the docs directory be structured with "user" and "developer"
subdirectories, such as::

    ysapplication/
      README.rst
      docs/
        conf.py        (1)
        index.rst      (2)
        user/
          conf.py      (3)
          index.rst    (4,5)
          user_doc_1.rst
          user_doc_2.rst
        developer/
          index.rst    (5)
          ysapplication.apps.rst
          ysapplication.views.rst


1. ``conf.py`` is the Sphinx configuration file. Generally, for YANG Suite apps,
   this file should lead with a ``from yangsuite.sphinx_conf import *`` to
   import default configuration provided by YANG Suite itself, then override
   only the specific properties that need to be customized for this app.
2. The base ``index.rst`` will typically have little more than an
   ``.. include:: ../README`` statement (so that the package's ``README.rst``
   content will also be included), plus references to ``user/index`` and
   ``developer/index``.
3. In most cases, the ``user/conf.py`` can import the parent ``conf.py`` and
   only needs to override the release string.
   See ``docs/app_template/docs/user/conf.py`` for an example.
4. For a particularly simple application, the ``user/index.rst`` may be the
   only file in this directory and may directly contain all relevant info.
5. In general, the ``user/index.rst`` and ``developer/index.rst`` will contain
   some introductory content, followed by ReST ``toctree`` directives
   providing a table of contents for all other
   documents in the corresponding subdirectory.

Adding online help pages
------------------------

If you're building a new application using the provided YANG Suite application
template, then many of these steps are already pre-configured for you.
The steps below are provided for reference and for those who are updating
an older YANG Suite application to fit into the latest documentation tooling.

1. Make sure the documentation sources are included in a source distribution
   of the package, in ``MANIFEST.in``::

     recursive-include docs *

   Additionally make sure your inclusions under the ``static`` directory are
   not inadvertently excluding generated documentation files and images -
   it's generally easiest to just include everything under ``static`` as part
   of your package, even if some files thus included are not strictly needed.
   In other words, instead of::

     recursive-include ysT_APPLICATION/static *.css *.js

   you should instead generally use simply::

     recursive-include ysT_APPLICATION/static/ysT_APPLICATION *

   (where, of course, you would replace ``ysT_APPLICATION`` with the name of
   your application, same as elsewhere in the application template.)

2. Replace boilerplate configuration in ``docs/conf.py`` with a
   ``from yangsuite.sphinx_conf import *``, and create ``docs/user/conf.py``
   from the template, if not already present.

3. Add a Makefile to your project (based on the latest application template,
   and again replacing all ``ysT_APPLICATION`` strings with the actual
   application name).

4. All of the derived documentation content under ``*/static/*/docs``, while
   part of the package distribution, should *not* be committed to Git, as it's
   generated files rather than the original source of truth under
   ``docs/user``.
   Add the following to your ``.gitignore``::

     # Don't commit derived documentation files
     */static/*/docs/

5. If you have previously committed anything under this subdirectory to your
   Git repo, be sure to remove it now::

     git rm -r */static/*/docs/*

If all of the above has been done correctly, then to build the files used for
online help under ``*/static/*/docs``, you can simply run
``make`` or ``make help``.

Now that you have online help content in your ``static`` directory,
these pages will be automatically included in the YANG Suite online help
system, appearing in its table of contents and being discoverable by
searching the help pages.

Specifying the order of help pages in the table of contents
```````````````````````````````````````````````````````````

If you have multiple separate help pages (as would be common in a larger or
more complex YANG Suite application), they will all be automatically included
in the YANG Suite online help system. By default, they will be listed in
alphabetical order (based on the help file name) in the table of contents.

If you would prefer to have them listed in a specific, logical order, you can
specify this order using the ``help_pages`` parameter in your ``apps.py`` file.
For example, let's say you have three help files named ``basic.rst``,
``advanced.rst``, and ``tips.rst``, and you want to have your
"Basic usage" help file listed first, followed by "Advanced usage", and finally
by "Tips and tricks". Then part of your ``apps.py`` might look like this::

  help_pages = [
    ('Basic usage', 'basic'),
    ('Advanced usage', 'advanced'),
    ('Tips and tricks', 'tips'),
  ]

Setting the help link for your page templates
---------------------------------------------

All YANG Suite page templates inheriting from ``base-cui.html`` have a "help"
``(?)`` button in the top right corner. By default this button links to the
top-level YANG Suite help page, but often it will be more helpful to your
users to link to a specific help page provided by your package. This can
be accomplished by overriding the ``help_url`` block. E.g., to link to help
page ``"view_help"`` in your package, this might look like::

  {% block help_url %}{% url 'help' section='ysT_APPLICATION' document='view_help' %}{% endblock %}

Building docs manually
----------------------

To (re-)build each type of documentation, you can use the following commands.

PDF documentation
`````````````````

PDF documentation is generated via an intermediate build to LaTeX format.
You may need to install ``latexmk`` on your system and then enter your yangsuite
installation virtualenv for this to work.
To build the full (developer) documentation as PDF::

   sphinx-build -b latex docs build/sphinx/full
   cd build/sphinx/full
   make

User guide PDF documentation can be built similarly, but using only the
``docs/user`` subdirectory as sources::

   sphinx-build -b latex docs/user build/sphinx/user
   cd build/sphinx/user
   make

Full HTML documentation (readthedocs style)
```````````````````````````````````````````

HTML documentation in readthedocs style can be generated with::

   sphinx-build -b html docs build/sphinx/full

Build and publishing of these docs can be integrated with Jenkins via
a standalone `build_publish_docs script
<https://wwwin-github.cisco.com/yang-suite/tools/blob/master/bin/build_publish_docs>`_

Online help (as embedded in YANG Suite packages)
````````````````````````````````````````````````

The online help can be generated and packaged in one step using ``make``,
or, to simply build the online help files alone, ``make help``.

.. _Sphinx: http://www.sphinx-doc.org/en/master/
