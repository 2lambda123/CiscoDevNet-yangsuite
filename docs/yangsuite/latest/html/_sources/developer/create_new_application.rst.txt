Creating a new application from our template
============================================

We provide a template for the development of new YANG Suite applications at
https://wwwin-github.cisco.com/yang-suite/yangsuite-app-template .
Refer to the included
`instructions <https://wwwin-github.cisco.com/yang-suite/yangsuite-app-template/blob/develop/INSTRUCTIONS.rst>`_
for guidance on the basic steps needed to create a new application
using this template.

The following sections of this document describe more advanced optional steps
that are primarily of interest to developers of core YANG Suite content.

.. note::

   Placeholder text throughout this document and the application template
   itself is prefixed with ``T_``.

Mirror your application repository to wwwin-github.cisco.com
------------------------------------------------------------

.. note::
   If you're a member of the YANG Suite development team, you can create
   your repository under the "yang-suite" organization where the other
   "official" applications reside. Otherwise, you can create the repository
   under your own CEC username. In this section and below, we will use
   ``$GROUPING`` as shorthand for '"yang-suite" or your username'.

1. Create github repo

   - If you're a member of the YANG Suite development team, you can `create a
     repository under the "yang-suite" organization
     <https://wwwin-github.cisco.com/organizations/yang-suite/repositories/new>`_.
     Otherwise, `create the repository under your userid
     <https://wwwin-github.cisco.com/new>`_.
   - Enter "yangsuite-T_APPLICATION" (use your application name here!) as the
     ``Repository name``
   - Click ``Create repository``
   - Do *not* select "Initialize this repository with a README" or
     "Add .gitignore" since you've already initialized the repository locally.

2. Push to github::

      git remote add origin https://wwwin-github.cisco.com/$GROUPING/yangsuite-T_APPLICATION.git
      git push --set-upstream origin master
      git push --set-upstream origin develop
      git push --tag

3. Set development branch as the default target for pull requests.

   - Go to
     https://wwwin-github.cisco.com/$GROUPING/yangsuite-T_APPLICATION/settings/branches.
   - Under ``Default branch``, select "develop" from the drop-down menu and
     then click ``Update``.

Set up Jenkins integration
--------------------------

.. note:: This section is written assuming that you are a member of the
   YANG Suite development team and thus have access to the ``team_yangsuite``
   Jenkins group. Setting up a Jenkins job from scratch is not simple,
   but when you can copy an existing job it is much easier.

You are going to create a Jenkins job that will run your test automation every
time there is a commit or pull request to your wwwin-github repository.
Additionally, commits to the ``master`` or ``develop`` branches will be built
and automatically published to our internal PyPI repository on Artifactory,
and a new release (commit to master) will trigger an automatic release
announcement email. This may sound like a lot but fortunately we have a job
template that makes most of this automatic.

1. Create your new job.

   - Go to https://engci-jenkins-sjc2.cisco.com/jenkins/job/team_yangsuite/job/yangsuite-projects/newJob
   - Fill in your application name (yangsuite-T_APPLICATION) as the "item name"
     at the top of the page.
   - Select "YANG Suite job template" as the project type (approximately
     halfway down the page), then click ``OK``.

2. Specify job parameters.

   - The "Name" should already be populated with the text you entered on the
     previous page.
   - The "Repository URL" should be the Git repository you have created
     (https://wwwin-github.cisco.com/$GROUPING/yangsuite-T_APPLICATION.git)
   - The "GitHub project URL" should be the project page for your repository
     (https://wwwin-github.cisco.com/$GROUPING/yangsuite-T_APPLICATION)
   - Click ``Save``.

   (You just saved a LOT of trial and error by not starting from scratch
   to get everything else set up correctly.)

3. Enable GitHub hooks

   - Go to your repository's web page and select the ``Settings`` tab near
     the top right corner of the page.
   - Select ``Hooks & services`` on this page.
   - Set up Jenkins triggers for commits:

     - Click ``Add webhook`` and re-enter your credentials if prompted.
     - Set the ``Payload URL`` to
       "https://engci-jenkins-sjc2.cisco.com/jenkins/github-webhook/"
       and the ``Content type`` to "application/json"
     - Under "Which events would you like to trigger this webhook?", select
       ``Just the push event.``
     - Click ``Add webhook``.

   - Set up Jenkins triggers for pull requests:

     - Click ``Add webhook`` and re-enter your credentials if prompted.
     - Set the ``Payload URL`` to
       "https://engci-jenkins-sjc2.cisco.com/jenkins/github-pull-request-hook/"
       and the ``Content type`` to "application/x-www-form-urlencoded".
     - Under "Which events would you like to trigger this webhook?", select
       ``Let me select individual events.``, then check only the
       ``Pull request`` box.
     - Click ``Add webhook``.

